# -*- coding: utf-8 -*-
"""lasso_example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/JhonaCode/LASSO/blob/main/lasso_example.ipynb

# Script to read LASSO 2m-Temperature using just XArray

### IMPORT PYTHON FUNCTIONS

We start by installing some packages that are not available by default on Google-Colab.
"""

"""Now the regular imports """

import numpy as np
import matplotlib.pyplot as plt

import netCDF4 as nc

#from metpy.units import *
#from metpy.calc import density

from  scipy.special import gamma

#import h5py,bokeh,seaborn,dask,distributed
#import notebook,pandas,xarray,graphviz,pandas_datareader

import xarray as xr

from  ncdump  import *

#from   pickle import TUPLE3
# what do we have now? 

"""
# Load the Drive helper and mount
from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive', force_remount=True)
"""

#!ls drive/Shareddrives/LASSO_G_COLAB

# path to with the model output for the simulation we will work with 
data_path = '/home/jhona/LASSO/ftp.archive.arm.gov/aguirrej1/239685/raw_model/'

"""### NetCdf information from ncdump function"""

ex='wrfout_d01_2016-05-18_12:00:00.nc'

nc_fit=nc.Dataset(data_path+ex)

data_inf= ncdump(nc_fit)

"""### XRARRY OPEN"""
# open a single file, just as an example
ncfile = xr.open_dataset(data_path+ex)

# number of variables in the file
print('Number of variables = ', len(ncfile.variables))

# summary of the file content
ncfile.keys()

# list the variables in the file (long list)
list(ncfile.variables)

# get the temperature
T2  = ncfile['T2']
CLD = ncfile['CLDFRA']


"""### PLOT TEMPERATURE """

# plot last time of the first file (~ 1h). 
# this should be after 1h of simulation. Because LES is initialized with uniform
# fields, the initial differences are very small. 

fig = plt.figure()
ax  = plt.axes()

cf = plt.pcolormesh(T2[0,:,:] - 273.15)
plt.xlabel('x [grid points]')
plt.ylabel('y [grid points]')
plt.title('T-2m [degC]')
plt.colorbar(cf)

#np.unique(T2)


# these files are not CF-compliant, so we have to force concatenation on the time dimension
ncfile = xr.open_mfdataset(data_path+'wrfout_d01_2016-05-*.nc', combine='nested', concat_dim='Time',decode_cf=False)


T2  = ncfile['T2']
CLD = ncfile['CLDFRA']

#print(CLD.shape)

####
cf = plt.pcolormesh(CLD[45,50,:,:] )
plt.xlabel('x [grid points]')
plt.ylabel('y [grid points]')
plt.title('Cloud Fraction ')
plt.colorbar(cf)



"""### PLOT CLOUD FRACTION """

plt.title('Cloud Fraction ')

plt.subplot(3, 2, 1)

plt.xlabel('x [grid points]')
plt.ylabel('y [grid points]')
cf = plt.pcolormesh(CLD[40,50,:,:] )

plt.subplot(3, 2, 2)
cf = plt.pcolormesh(CLD[45,50,:,:] )

plt.subplot(3, 2, 3)
cf = plt.pcolormesh(CLD[50,50,:,:] )

plt.subplot(3, 2, 4)
cf = plt.pcolormesh(CLD[55,50,:,:] )

plt.subplot(3, 2, 5)
cf = plt.pcolormesh(CLD[60,50,:,:] )

plt.subplot(3, 2, 6)
cf = plt.pcolormesh(CLD[65,50,:,:] )



#np.shape(T2)
#T2

# plot last time of the multi-file dataset (~15h after start). 

fig=plt.figure()
ax=plt.axes()

cf = plt.pcolormesh(T2[90,:,:] - 273.15)
plt.xlabel('x [grid points]')
plt.ylabel('y [grid points]')
plt.title('T-2m [degC]')
plt.colorbar(cf)

"""Where are the clouds? """

QCLD = ncfile['QCLOUD']
QCLD

# domain mean vertical profile of QCLD
QCLD_PROF  = np.mean(QCLD, axis=(2,3))
CLD_PROF = np.mean(CLD, axis=(2,3))
QCLD_PROF

#plt.plot(QCLDPROF[0,:])

# make a plot
fig=plt.figure()
ax=plt.axes()

plt.subplot(1, 3, 1)
plt.plot(QCLD_PROF[45,:], np.arange(226), 'r')
plt.subplot(1, 3, 2)
plt.plot(CLD_PROF[45,:] , np.arange(226), 'b')

plt.subplot(1, 3, 3)
plt.plot(CLD_PROF[55,:] , np.arange(226), 'b')


fig=plt.figure()
ax=plt.axes()
cf = plt.pcolormesh(CLD_PROF[:,0:100].T)
plt.xlabel('Time [grid points]')
plt.ylabel('Z [grid points]')
plt.title('Cloud Fraction Profile [degC]')
plt.colorbar(cf)

"""### LIQUID WATER PATH"""

fig=plt.figure()
ax=plt.axes()

LWP = np.sum(QCLD, axis=1)*50.*1.1

cf = plt.pcolormesh(LWP[45, :,:])
plt.xlabel('x [grid points]')
plt.ylabel('y [grid points]')
plt.title('Approx. ~ LWP [au]')
plt.colorbar(cf)


plt.show()

"""
from skimage import measure
from skimage import filters

blobs = LWP[45,:,:] > 0.05

labels = measure.label(blobs, background=0)
print('last label = ', np.max(labels))

plt.figure(figsize=(6, 3.5))
plt.subplot(121)
plt.pcolormesh(blobs, cmap='gray')
plt.axis('off')
plt.subplot(122)
plt.pcolormesh(labels, cmap='nipy_spectral')
plt.axis('off')

plt.tight_layout()
plt.show()

properties = measure.regionprops(labels)
areas = [prop.area for prop in properties] 

print('min area = ', np.min(areas))
print('max area = ', np.max(areas))
len(areas)

plt.hist(areas,bins=np.arange(0,400, 10))

properties[0].coords
center = np.array( [prop.centroid for prop in properties] )
center.shape
center[0:3]

center.shape

plt.pcolormesh(labels, cmap='nipy_spectral')

plt.scatter(center[:,1], center[:,0], marker='+')

areas
"""

